{"version":3,"sources":["constants.js","components/Cell/Cell.jsx","components/Board/Board.jsx","App.jsx","reportWebVitals.js","index.js"],"names":["PLAYERS","WINS","Cell","id","currentPlayer","onSelect","xSelected","oSelected","gameOver","useState","hover","setHover","isSelected","cellClasses","classNames","x","o","className","onMouseEnter","onMouseLeave","onClick","i","style","opacity","Board","xSelections","oSelections","cells","includes","push","renderCells","App","setCurrentPlayer","setXSelections","setOSelections","message","setMessage","setGameOver","useEffect","length","isWin","isTie","switchTurns","cp","selections","some","winningCells","every","cell","isAlreadySelected","arr","toUpperCase","slice","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.5aacd134.chunk.js","sourcesContent":["export const PLAYERS = {\n  X: 'x',\n  O: 'o',\n};\n\nexport const WINS = [\n  [0, 1, 2],\n  [3, 4, 5],\n  [6, 7, 8],\n  [0, 3, 6],\n  [1, 4, 7],\n  [2, 5, 8],\n  [0, 4, 8],\n  [2, 4, 6],\n];\n","import React, { useState } from 'react';\nimport './Cell.css';\nimport classNames from 'classnames';\nimport { PLAYERS } from '../../constants';\n\nexport default function Cell({ id, currentPlayer, onSelect, xSelected, oSelected, gameOver }) {\n  const [hover, setHover] = useState(false);\n\n  const handleSelection = i => {\n    setHover(false);\n    onSelect(i);\n  };\n\n  const isSelected = xSelected || oSelected;\n\n  const cellClasses = classNames('cell', {\n    x: xSelected || (!isSelected && hover && currentPlayer === PLAYERS.X && !gameOver),\n    o: oSelected || (!isSelected && hover && currentPlayer === PLAYERS.O && !gameOver),\n  });\n\n  return (\n    <div\n      className={cellClasses}\n      onMouseEnter={() => setHover(true)}\n      onMouseLeave={() => setHover(false)}\n      onClick={() => handleSelection(id)}\n    >\n      <div\n        className={classNames('item-container', {\n          hover: hover && !xSelected && !oSelected && !gameOver,\n        })}\n        style={{ opacity: hover && !xSelected && !oSelected && !gameOver ? '50%' : '100%' }}\n      >\n        <div />\n        <div />\n      </div>\n    </div>\n  );\n}\n","import './Board.css';\nimport Cell from '../Cell/Cell';\n\nexport default function Board({ currentPlayer, onSelect, xSelections, oSelections, gameOver }) {\n  const renderCells = () => {\n    const cells = [];\n\n    for (let i = 0; i < 9; i++) {\n      const xSelected = xSelections.includes(i);\n      const oSelected = oSelections.includes(i);\n\n      cells.push(\n        <Cell\n          key={i}\n          id={i}\n          currentPlayer={currentPlayer}\n          onSelect={onSelect}\n          xSelected={xSelected}\n          oSelected={oSelected}\n          gameOver={gameOver}\n        />\n      );\n    }\n\n    return cells;\n  };\n  return <div className='board'>{renderCells()}</div>;\n}\n","import { useState, useEffect } from 'react';\nimport './App.css';\nimport Board from './components/Board/Board';\nimport { PLAYERS, WINS } from './constants';\n\nfunction App() {\n  const [currentPlayer, setCurrentPlayer] = useState(PLAYERS.X);\n  const [xSelections, setXSelections] = useState([]);\n  const [oSelections, setOSelections] = useState([]);\n  const [message, setMessage] = useState('');\n  const [gameOver, setGameOver] = useState(false);\n\n  useEffect(() => {\n    setMessage(`Player ${currentPlayer}'s turn`);\n  }, [currentPlayer]);\n\n  useEffect(() => {\n    if (xSelections.length === 0 && oSelections.length === 0) return;\n\n    if (isWin()) {\n      setMessage(`Player ${currentPlayer} wins!`);\n      setGameOver(true);\n    } else if (isTie()) {\n      setMessage(\"It's a tie!\");\n      setGameOver(true);\n    } else {\n      switchTurns();\n    }\n\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, [xSelections, oSelections]);\n\n  const switchTurns = () => {\n    setCurrentPlayer(cp => (cp === PLAYERS.X ? PLAYERS.O : PLAYERS.X));\n  };\n\n  const isWin = () => {\n    const selections = currentPlayer === PLAYERS.X ? xSelections : oSelections;\n    return WINS.some(winningCells => winningCells.every(cell => selections.includes(cell)));\n  };\n\n  const isTie = () => !isWin() && xSelections.length + oSelections.length === 9;\n\n  const isAlreadySelected = id => xSelections.includes(id) || oSelections.includes(id);\n\n  const undo = () => {\n    if (gameOver) return;\n    if (xSelections.length === 0 && oSelections.length === 0) return;\n\n    if (currentPlayer === PLAYERS.O) {\n      setXSelections(selections => selections.slice(0, -1));\n    } else {\n      setOSelections(selections => selections.slice(0, -1));\n    }\n  };\n\n  const reset = () => {\n    setXSelections([]);\n    setOSelections([]);\n    setCurrentPlayer(PLAYERS.X);\n    setGameOver(false);\n    setMessage(`Player ${PLAYERS.X}'s turn`);\n  };\n\n  const onSelect = id => {\n    if (gameOver) return;\n    if (!isAlreadySelected(id)) {\n      if (currentPlayer === PLAYERS.X) {\n        setXSelections(arr => [...arr, id]);\n      } else {\n        setOSelections(arr => [...arr, id]);\n      }\n    }\n  };\n\n  return (\n    <div className='App'>\n      <Board\n        currentPlayer={currentPlayer}\n        onSelect={onSelect}\n        xSelections={xSelections}\n        oSelections={oSelections}\n        gameOver={gameOver}\n      />\n      <p className={'message'}>{message.toUpperCase()}</p>\n      <div className='button-container'>\n        {!gameOver && (\n          <p className='undo-button' onClick={undo}>\n            UNDO\n          </p>\n        )}\n        <p className='reset-button' onClick={reset}>\n          {gameOver ? 'PLAY AGAIN' : 'RESET'}\n        </p>\n      </div>\n    </div>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App.jsx';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}